#include <cmath>
#include <cstdlib>
#include <iostream>
// TODO: include chrono and use it properly for time measurement

#include "complex.h"
#include "lodepng.h"


// TODO: Fix Me!
//int mandelbrot(? ? ? )
//{
//
//}


int main(int argc, char **argv) {
  int width = 1024, height = 1024;
  double sx = 2. / width;
  double sy = 2. / height;
  double m = 1.;
  double x0 = -.5, y0 = .0;

  unsigned char *image = NULL;

  image = (unsigned char *)malloc(width * height * 4);

  if (argc > 1) {
    m = std::strtod(argv[1], 0);
  }
  if (argc > 2) {
    x0 = std::strtod(argv[2], 0);
  }
  if (argc > 3) {
    y0 = std::strtod(argv[3], 0);
  }

  // iterate over image pixels and calculate their value
  for (int x = 0; x < width; x++) {
    for (int y = 0; y < height; y++) {
      complex c(x0 + sx * (x - width / 2) / m, y0 + sy * (y - height / 2) / m);

      // Test image generated by this template:
      int color_val = x + y;
      // TODO: implement correct mandelbrot(???) function
      //int color_val = mandelbrot(???);

      image[4 * width * y + 4 * x + 0] = color_val; // R
      image[4 * width * y + 4 * x + 1] = color_val; // G
      image[4 * width * y + 4 * x + 2] = color_val; // B
      image[4 * width * y + 4 * x + 3] = 255;       // Alpha
    }
  }

  /*Encode the image*/
  unsigned error =
      lodepng_encode32_file("mandelbrot.png", image, width, height);
  if (error) {
    std::cout << "error " << error << " : " << lodepng_error_text(error)
              << std::endl;
  }

  /*cleanup*/
  free(image);

  return 0;
}
